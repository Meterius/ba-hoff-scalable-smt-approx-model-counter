Approach k-Subset-Classification:
    For integer domain {0, ..., d-1}
    Random Parameters:
        a in [0, 1]
        K in k subset of {0, ..., d-1}
    Hash: h(x) = a if x in K else (1-a)
    Analysis:
        Pr[h(x)=0] = 1/2 due to the binary random parameter a

        For calculating
        Pr[h(x)=0 and h(y)=0]
        we can use the hyper geometric distribution
        https://en.wikipedia.org/wiki/Hypergeometric_distribution
        with N=d and K=k and n=2
        and calculate that
        Pr[h(x)=0 and h(y)=0]=Pr[a=1] * Pr[x in K and y in K] + Pr[a=0] * Pr[x not in K and y not in K]
                             =1/2 * (Pr[x in K and y in K] + Pr[x not in K and y not in K])
        with the hyper geometric distribution using p_hyper(0) + p_hyper(2)
        we get
        Pr[x in K and y in K] + Pr[x not in K and y not in K] =
        ((d-k)*(d-k-1)+k*(k-1)) / (d*(d-1))
        since Pr[h(x)=0 and h(y)=0] needs to be 1/4 to be pairwise independent
        we get that the hash set is only pairwise independent for
        d_i=4+3*(i-1)+(i-1)*i with 2 possible k values the lower one being k_i=(d_i-1-i)/2 and the higher one simply d_i-k_i
        thus since k_i is linear to d_i the hash random parameters and in extension the
        hash formula would be linear to d which makes this hash idea worth-less since the hash formula
        will be of exponential complexity relative to the bit_count input parameter

Complement of XOR:
    Simply the hash set that is the complement of the XOR hash set.
    This is also not use-able since the XOR hash set contains for n bits
    n + 1 bits to characterize i.e. has 2 ** (n + 1) different hash functions.
    But since the amount of hash functions is 2 ** (2 ** n) this means that the
    complement has 2 ** (2 ** n) - 2 ** (n + 1) different hash functions that need
    to be characterized by some parameter. But as evident the parameter would need to be
    of exponential size itself (of complexity 2 ** n) which makes it the hash formula
    of exponential complexity relative to the bit_count input parameter